/*
  ==============================================================================

    This file was auto-generated by the Jucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#ifndef __PLUGINEDITOR_H_4ACCBAA__
#define __PLUGINEDITOR_H_4ACCBAA__

#include "../JuceLibraryCode/JuceHeader.h"
#include "PluginProcessor.h"


//==============================================================================
/** This is the editor component that our filter will display.
*/
class SimpleMorphSynthProcessorEditor  : public AudioProcessorEditor,
                                            public SliderListener,
                                            public Timer
{
public:
    SimpleMorphSynthProcessorEditor (SimpleMorphSynth* ownerFilter);
    ~SimpleMorphSynthProcessorEditor();

    //==============================================================================
    void timerCallback();
    void paint (Graphics& g);
    void resized();
    void sliderValueChanged (Slider*);
	void mouseUp(const MouseEvent &event);
	void mouseDown(const MouseEvent &event);
	void mouseDrag(const MouseEvent &event);

private:
    MidiKeyboardComponent mMidiKeyboard;
    Label mInfoLabel, mGainLabel, mDelayLabel, mSourceLabel;
    Slider mGainSlider;
    Slider mDelaySlider;
	Slider mSourceSlider;

	int mWaveClicked;
	juce::Point<float> mLastDrag;
	bool mDragging;
	int checkIfInWavetable(int x, int y, int forceTable = -1);
    ScopedPointer<ResizableCornerComponent> mResizer;
    ComponentBoundsConstrainer mResizeLimits;

    AudioPlayHead::CurrentPositionInfo mLastDisplayedPosition;

    SimpleMorphSynth* getProcessor() const
    {
        return static_cast <SimpleMorphSynth*> (getAudioProcessor());
    }

    void displayPositionInfo (const AudioPlayHead::CurrentPositionInfo& pos);
};


#endif  // __PLUGINEDITOR_H_4ACCBAA__
