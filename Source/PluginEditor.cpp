/*
  ==============================================================================

    This file was auto-generated by the Jucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"

//==============================================================================
SimpleMorphSynthProcessorEditor::SimpleMorphSynthProcessorEditor (SimpleMorphSynth* ownerFilter)
    : AudioProcessorEditor (ownerFilter),
      mMidiKeyboard (ownerFilter->mKeyboardState, MidiKeyboardComponent::horizontalKeyboard)
{
	

    // add the midi keyboard component..
    //addAndMakeVisible (&mMidiKeyboard);

    // set our component's initial size to be the last one that was stored in the filter's settings
    setSize (ownerFilter->mLastUIWidth,
             ownerFilter->mLastUIHeight);
	addSlider(SourceParam, juce::Point<int>(390, 20), juce::Point<int>(20, (int) WAVEHEIGHT*2-40));
	addSlider(SmoothStrengthParam, juce::Point<int>(380, 450), juce::Point<int>(20, 100));
	addSlider(SmoothRangeParam, juce::Point<int>(400, 450), juce::Point<int>(20, 100), 1, 16);

	for (int i = 0; i < 2; i++) {
		for (int j = 0; j <= LASTRADIOACTION; j++) {
			juce::ToggleButton *button = new juce::ToggleButton(convertActionToString(j));
			button->setRadioGroupId(i + 1);
			button->addListener(this);
			addAndMakeVisible(button);
			mButtons.push_back(button);
		}
	}

	mWaveClicked = -1;
    startTimer (50);
	resized();
}

void SimpleMorphSynthProcessorEditor::addSlider(Parameter param, juce::Point<int> point, 
				juce::Point<int> size, double minVal, double maxVal, juce::Slider::SliderStyle style)
{
	ComponentContainer cont;
	cont.mParam = param;
	cont.mLabel = new Label(getProcessor()->getParameterName(param));
	Slider *sl = new Slider();
	sl->setBounds(point.getX(), point.getY(), size.getX(), size.getY());

	addAndMakeVisible(sl);
	sl->setSliderStyle(style);
	sl->addListener(this);
	sl->setRange(minVal, maxVal, 0.01);
	sl->setValue(0);

	cont.mComponent = sl;

	cont.mLabel->attachToComponent (sl, false);
	cont.mLabel->setFont (Font (11.0f));
	addAndMakeVisible(cont.mLabel);

	mSliders.push_back(cont);
}

void SimpleMorphSynthProcessorEditor::mouseDown(const MouseEvent &event) {
	mLastDrag = event.getPosition().toFloat();
	mWaveClicked = checkIfInWavetable((int)mLastDrag.getX(), (int)mLastDrag.getY());
	if (mWaveClicked != -1) {
		size_t i = LASTRADIOACTION + mWaveClicked*(LASTRADIOACTION + 1);
		mButtons[i]->triggerClick();
	}
}

void SimpleMorphSynthProcessorEditor::mouseUp(const MouseEvent &) {
	mWaveClicked = -1;
}

void SimpleMorphSynthProcessorEditor::mouseDrag(const MouseEvent &event) {
	if (mWaveClicked == -1) {
		return;
	}
	auto pos = event.getPosition().toFloat();
	auto dragVec = pos - mLastDrag;
	auto dragDistLeft = dragVec;
	int i = 0;
	while (dragDistLeft.getDistanceFromOrigin() > 0.2f && i < 10000) {
		checkIfInWavetable((int)mLastDrag.getX(), (int)mLastDrag.getY(), mWaveClicked);
		auto dPos = (dragVec/dragVec.getDistanceFromOrigin())*0.01f;
		dragDistLeft -= dPos;
		mLastDrag += dPos;
		i++;
	}
	mLastDrag = pos;
	checkIfInWavetable((int)mLastDrag.getX(), (int)mLastDrag.getY(), mWaveClicked );
	repaint();
}

int SimpleMorphSynthProcessorEditor::checkIfInWavetable(int x, int y, int forceTable) {
	size_t numTables = getProcessor()->getNumTables();
	for (size_t i = 0; i < numTables; i++) {
		juce::Point<float> table = OscPoints[i];
		int tx = (int) (x - table.getX()); int ty = (int) (y - table.getY());
		if ((0 <= tx && tx < WAVESIZE && 0 <= ty && ty < WAVEHEIGHT*2 && forceTable == -1 ) 
					|| (forceTable != -1 && ((size_t) forceTable) == i)) {
			getProcessor()->setWaveTableValue(i, tx, ((float) -ty+WAVEHEIGHT)/WAVEHEIGHT);
			return i;
		}
	}

	return -1;
}

SimpleMorphSynthProcessorEditor::~SimpleMorphSynthProcessorEditor()
{
	for (size_t i = 0; i < mButtons.size(); i++) {
		delete mButtons[i];
	}

	for (size_t i =0; i < mSliders.size(); i++) {
		delete mSliders[i].mComponent;
		delete mSliders[i].mLabel;
	}
}

//==============================================================================
void SimpleMorphSynthProcessorEditor::paint (Graphics& g)
{
	SimpleMorphSynth *synth = getProcessor();
	g.setColour(juce::Colour(28, 44, 45));
	g.fillAll();
	size_t tables = getProcessor()->getNumTables();

	float source = getProcessor()->getParameter(SourceParam);

	for (size_t t = 0; t < tables; t++) {
		juce::Point<float> oscPoint = OscPoints[t];
		float x = oscPoint.getX(); float y = oscPoint.getY();
		g.setColour(juce::Colour(31, 31, 31));
		g.fillRect(x, y, (float) WAVESIZE, WAVEHEIGHT * 2);
		g.setColour(juce::Colour(242, 164, 15));
		y += WAVEHEIGHT;
		for (int i = 0; i < WAVESIZE; i++) {
			float waveVal = getProcessor()->getWaveTableValue(t, i);
			g.fillRect(x+i, y, 1.f, -waveVal*WAVEHEIGHT);
		}
		source = 1-source;
	}


	juce::Point<float> oscPoint = OscPoints[2];
	float x = oscPoint.getX(); float y = oscPoint.getY();
	g.setColour(juce::Colour(31, 31, 31));
	g.fillRect(x, y, (float) WAVESIZE, WAVEHEIGHT*2);
	g.setColour(juce::Colour(150, 10, 10));
	y += WAVEHEIGHT;
	for (int i = 0; i < WAVESIZE; i++) {
		g.fillRect(x+i, y, 1.f, -synth->getWaveValue((float) i) * WAVEHEIGHT);
	}
}

void SimpleMorphSynthProcessorEditor::resized()
{

    const int keyboardHeight = 70;
    mMidiKeyboard.setBounds (4, getHeight() - keyboardHeight - 4, 700-WAVESIZE-8, keyboardHeight);

	size_t k = 0;
	for (int i = 0; i < 2; i++) {
		juce::Point<int> buttonPoint = PresetFuncButtonPoints[i];
		int x = buttonPoint.getX(); int y = buttonPoint.getY();

		for (int j = 0; j <= LASTRADIOACTION; j++) {
			if (mButtons.size() <= k) {
				break;
			}
			mButtons[k]->setBounds(x, y+j*PRESETACTIONBUTTONSIZE, PRESETACTIONBUTTONSIZE+60, PRESETACTIONBUTTONSIZE);
			k++;
		}
	}

    getProcessor()->mLastUIWidth = getWidth();
    getProcessor()->mLastUIHeight = getHeight();
}

//==============================================================================
// This timer periodically checks whether any of the filter's parameters have changed...
void SimpleMorphSynthProcessorEditor::timerCallback()
{
    SimpleMorphSynth* ourProcessor = getProcessor();

    AudioPlayHead::CurrentPositionInfo newPos (ourProcessor->mLastPosInfo);
}

// This is our Slider::Listener callback, when the user drags a slider.
void SimpleMorphSynthProcessorEditor::sliderValueChanged (Slider* slider)
{
	for (size_t i = 0; i < mSliders.size(); i++) {
	if (mSliders[i].mComponent == slider)
		{
			getProcessor()->setParameterNotifyingHost (mSliders[i].mParam,
														(float) slider->getValue());
			repaint();
		}
	}
}
 
void SimpleMorphSynthProcessorEditor::buttonClicked(Button *button) {
	size_t k = 0;
	for (size_t i = 0; i < 2; i++) {
		for (size_t j = 0; j <= LASTRADIOACTION; j++) {
			if (mButtons.size() <= k) {
				break;
			}
			if (mButtons[k] == button) {
				getProcessor()->mWaveTables.at(i)->executeAction(j);
				repaint();
				return;
			}
			k++;
		}
	}
}

void SimpleMorphSynthProcessorEditor::buttonStateChanged(Button *button) {
}